# Generated by Django 2.1.3 on 2019-09-13 19:20

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='users/')),
                ('type', models.CharField(choices=[('user', 'User'), ('org', 'Organization')], default='user', max_length=4)),
            ],
            options={
                'verbose_name': 'Client',
                'verbose_name_plural': 'Clients',
                'db_table': 'clients',
                'base_manager_name': 'objects',
                'default_manager_name': 'objects',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AppliedJobs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response', models.TextField(blank=True)),
                ('date_applied', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_responded', models.DateTimeField(blank=True)),
                ('status', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Certifications',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('issuing_organisation', models.CharField(max_length=100)),
                ('issue_date', models.DateField()),
                ('credential_ID', models.CharField(max_length=100)),
                ('credential_URL', models.URLField(max_length=100)),
            ],
            options={
                'verbose_name': 'Certification',
                'verbose_name_plural': 'Certifications',
                'db_table': 'user_certifications',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('user_from', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_from_set', to=settings.AUTH_USER_MODEL)),
                ('user_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rel_to_set', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-created',),
            },
        ),
        migrations.CreateModel(
            name='Education',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school', models.CharField(max_length=100)),
                ('degree', models.CharField(max_length=100)),
                ('field_of_study', models.CharField(blank=True, max_length=100, null=True)),
                ('start_year', models.DateField()),
                ('end_year', models.DateField()),
                ('is_studying', models.BooleanField(default=True)),
                ('grade', models.CharField(max_length=10)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
            ],
            options={
                'verbose_name': 'Education',
                'verbose_name_plural': 'Educations',
                'db_table': 'user_educations',
            },
        ),
        migrations.CreateModel(
            name='JobApplication',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('category', models.CharField(choices=[('af', 'Accounting and Finance'), ('cde', 'Clerical and Date Entry'), ('co', 'Counselling'), ('ca', 'Court Administration'), ('hr', 'Human Resources'), ('in', 'Investigative'), ('it', 'IT and Computers'), ('law', 'Law Enforcement'), ('mgmt', 'Management'), ('mis', 'Miscellaneous'), ('pr', 'Public Relations')], default='i', max_length=7)),
                ('salary', models.PositiveIntegerField(default=0)),
                ('type', models.CharField(choices=[('f', 'Full-Time'), ('i', 'Intern'), ('t', 'Temporary'), ('p', 'Part-Time'), ('fr', 'Freelance')], default='f', max_length=2)),
                ('descr', models.TextField()),
                ('location', models.CharField(max_length=100)),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Job Application',
                'verbose_name_plural': 'Job Applications',
            },
        ),
        migrations.CreateModel(
            name='OrgProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verification', models.BooleanField(default=True)),
                ('about', models.TextField(max_length=10000)),
                ('mis_vis', models.TextField(max_length=10000)),
                ('why', models.TextField(max_length=10000)),
                ('teams', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=100)),
                ('area_of_work', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile_org', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Org Profile',
                'verbose_name_plural': 'Org Profiles',
                'db_table': 'org_profiles',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=False)),
                ('associated_with', models.CharField(max_length=100)),
                ('project_URL', models.URLField(max_length=100)),
                ('description', models.TextField()),
            ],
            options={
                'verbose_name': 'Project',
                'verbose_name_plural': 'Projects',
                'db_table': 'user_projects',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(blank=True, choices=[('m', 'Male'), ('f', 'Female'), ('o', 'Others')], max_length=1, null=True)),
                ('resume', models.FileField(blank=True, null=True, upload_to='resumes/')),
                ('about', models.TextField(blank=True, max_length=3000, null=True)),
                ('languages', models.CharField(blank=True, max_length=100, null=True)),
                ('skills', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'db_table': 'user_profiles',
            },
        ),
        migrations.AddField(
            model_name='project',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='accounts.UserProfile'),
        ),
        migrations.AddField(
            model_name='jobapplication',
            name='applicants',
            field=models.ManyToManyField(blank=True, to='accounts.UserProfile'),
        ),
        migrations.AddField(
            model_name='jobapplication',
            name='org',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='JobApplication', to='accounts.OrgProfile'),
        ),
        migrations.AddField(
            model_name='jobapplication',
            name='req_skills',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='education',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='education', to='accounts.UserProfile'),
        ),
        migrations.AddField(
            model_name='certifications',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certificates', to='accounts.UserProfile'),
        ),
        migrations.AddField(
            model_name='appliedjobs',
            name='job',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applied_job', to='accounts.JobApplication'),
        ),
        migrations.AddField(
            model_name='appliedjobs',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='applied_user', to='accounts.UserProfile'),
        ),
        migrations.AddField(
            model_name='client',
            name='following',
            field=models.ManyToManyField(related_name='followers', through='accounts.Contact', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='client',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='client',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
